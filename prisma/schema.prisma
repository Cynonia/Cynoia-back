// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationType {
  PRIVATE
  GROUP
}

enum ReservationStatus {
  EN_ATTENTE
  CONFIRMEE
  REJETEE
  ANNULEE
}

model Entity {
  id       Int      @id @default(autoincrement())
  name     String
  logo     String?
  couleur  String?
  avatar   String?
  domaine  String?

  users       User[]
  roles       Role[]
  espaces     Espace[]
  equipements Equipement[]
  conversations Conversation[]
  invitations Invitation[]
}

model Role {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  status    Boolean @default(true)

  entities  Entity? @relation(fields: [entitiesId], references: [id])
  entitiesId Int?

  users     User[]
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  login     String  @unique
  password  String

  role      Role?   @relation(fields: [roleId], references: [id])
  roleId    Int?

  entity    Entity? @relation(fields: [entitiesId], references: [id])
  entitiesId Int?

  reservations Reservation[]

  // Chat relations
  conversations ConversationParticipant[]
  sentMessages Message[] @relation("UserMessages")
  createdConversations Conversation[] @relation("ConversationCreator")
}


model Espace {
  id           Int     @id @default(autoincrement())
  name         String
  surface      Int?
  description  String?
  capacity     Int?
  status       Boolean @default(true)
  validation   Boolean @default(false)
  pricePerHour Float? 
  images       String[]
  location     String?

  entity       Entity? @relation(fields: [entitiesId], references: [id])
  entitiesId   Int?

  type         TypeEspace? @relation(fields: [typeEspacesId], references: [id])
  typeEspacesId Int?

  reservations Reservation[]
  equipements  EquipementsOnEspaces[]
}

model TypeEspace {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  status    Boolean @default(true)

  espaces   Espace[]
}


model Equipement {
  id       Int    @id @default(autoincrement())
  name     String
  imgCover String?
  price    Float?  @default(0)
  state    String? @default("AVAILABLE")

  entity   Entity? @relation(fields: [entitiesId], references: [id])
  entitiesId Int?

  espaces EquipementsOnEspaces[]
  reservationEquipements ReservationEquipement[]
}

model EquipementsOnEspaces {
  equipementsId Int
  espacesId     Int

  equipement Equipement @relation(fields: [equipementsId], references: [id])
  espace     Espace     @relation(fields: [espacesId], references: [id])

  @@id([equipementsId, espacesId])
}

model Reservation {
  id              Int       @id @default(autoincrement())
  reservationDate DateTime  @db.Date
  startTime       DateTime  @db.Time
  endTime         DateTime  @db.Time
  status          String

  reservationEquipements ReservationEquipement[]

  espace    Espace?   @relation(fields: [espacesId], references: [id])
  espacesId Int?

  user       User               @relation(fields: [userId], references: [id])
  userId     Int @default(1)

  transaction Transaction?
}

model ReservationEquipement {
  reservationId Int
  equipementId  Int

  reservation Reservation @relation(fields: [reservationId], references: [id])
  equipement  Equipement  @relation(fields: [equipementId], references: [id])

  quantity Int     @default(1)
  price    Float?  
  state    String? 

  @@id([reservationId, equipementId])
}

model Transaction {
  id            Int         @id @default(autoincrement())

  reservation   Reservation @relation(fields: [reservationsId], references: [id])
  reservationsId Int @unique

  paymentMode   PaymentMode @relation(fields: [paymentmodeId], references: [id])
  paymentmodeId Int
}

model PaymentMode {
  id          Int           @id @default(autoincrement())
  name        String

  transactions Transaction[]
}

model Conversation {
  id           Int               @id @default(autoincrement())
  type         ConversationType
  name         String?

  entity       Entity            @relation(fields: [entitiesId], references: [id])
  entitiesId   Int

  createdBy    User              @relation("ConversationCreator", fields: [createdById], references: [id])
  createdById  Int

  participants ConversationParticipant[]
  messages     Message[]

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ConversationParticipant {
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  role           String?
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?

  @@id([userId, conversationId])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  senderId       Int
  content        String
  kind           String       @default("TEXT")
  createdAt      DateTime     @default(now())
}

model Invitation {
  id          Int       @id @default(autoincrement())
  email       String
  token       String
  entitiesId  Int
  entity      Entity    @relation(fields: [entitiesId], references: [id])
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  @@unique([email, entitiesId], name: "email_entitiesId")
}

